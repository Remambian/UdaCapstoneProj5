version: 2.1

jobs:
  test-build:
    docker:
      - image: circleci/node:14

    steps:
      - checkout
      # run build
      - run:
          name: install dependencies
          command: |
            sudo npm install 
            sudo npm install -g htmlhint

      # run lint
      - run:
          name: HTML Linting
          command: sudo npm run lint:html

  upload-docker:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7

      - run:
          name: Build docker container
          command: |
            sudo docker build -t remambian/capstoneimage:latest . 

      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Push to Docker Hub
          command: docker push remambian/capstoneimage:latest
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists 
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json
      - run:    
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroup-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      # - run:
      #     name: Extract the IPs of the management instances for Ansible 
      #     command: |
      #       echo [management] > ~/inventory.txt
      #       aws ec2 describe-instances \
      #         --region "${AWS_DEFAULT_REGION}" \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
      #         --output text >> ~/inventory.txt
      #       cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  create-deployment:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7 # Use the appropriate Docker version
      - run:
            name: Deploy to EKS Cluster
            command: |
              # Install kubectl (if not already installed)
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              sudo mv kubectl /usr/local/bin/

              # Authenticate with the EKS cluster using kubeconfig
              aws eks update-kubeconfig --name "${ENVIRONMENT_NAME}-cluster-role" --region ${AWS_DEFAULT_REGION}

              # Apply the Kubernetes deployment manifest
              kubectl apply -f deployment.json




workflows:
  default:
    jobs:
      # - test-build
      # - upload-docker:
      #     requires:
      #       - test-build
      # - deploy-infrastructure
      - create-deployment
